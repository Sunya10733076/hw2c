#include <stdio.h>
#include <stdbool.h>

#define MAX_SIZE 100

// Structure to represent a stack
struct Stack {
    int items[MAX_SIZE][2];
    int top;
};

// Function to initialize the stack
void initStack(struct Stack *stack) {
    stack->top = -1;
}

// Function to check if the stack is empty
bool isEmpty(struct Stack *stack) {
    return (stack->top == -1);
}

// Function to push an item onto the stack
void push(struct Stack *stack, int x, int y) {
    stack->top++;
    stack->items[stack->top][0] = x;
    stack->items[stack->top][1] = y;
}

// Function to pop an item from the stack
void pop(struct Stack *stack) {
    if (!isEmpty(stack)) {
        stack->top--;
    }
}

// Function to check if the move is valid
bool isValidMove(char maze[MAX_SIZE][MAX_SIZE], int rows, int cols, int x, int y) {
    return (x >= 0 && x < rows && y >= 0 && y < cols && maze[x][y] != '1');
}

// Function to play the maze game
void playMazeGame(char maze[MAX_SIZE][MAX_SIZE], int rows, int cols, char *moves) {
    int movesLen = 0;
    struct Stack stack;
    int player_x, player_y, obstacle_x, obstacle_y;
    int obstacle_direction = 1; // 1 for right, -1 for left

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (maze[i][j] == 'P') {
                player_x = i;
                player_y = j;
            }
            if (maze[i][j] == 'X') {
                obstacle_x = i;
                obstacle_y = j;
            }
        }
    }

    initStack(&stack);

    while (moves[movesLen] != '\0') {
        char move = moves[movesLen];
        int dx = 0, dy = 0;

        if (move == 'W' || move == 'w') {
            dx = -1;
        } else if (move == 'S' || move == 's') {
            dx = 1;
        } else if (move == 'A' || move == 'a') {
            dy = -1;
        } else if (move == 'D' || move == 'd') {
            dy = 1;
        } else if (move == 'B' || move == 'b') {
            if (!isEmpty(&stack)) {
                player_x = stack.items[stack.top][0];
                player_y = stack.items[stack.top][1];
                pop(&stack);
                movesLen++;
                continue;
            }
        }

        int new_x = player_x + dx;
        int new_y = player_y + dy;

        if (isValidMove(maze, rows, cols, new_x, new_y)) {
            push(&stack, player_x, player_y);
            player_x = new_x;
            player_y = new_y;

            if (player_x == obstacle_x && player_y == obstacle_y) {
                printf("Game over. You collided with the obstacle!\n");
                return;
            }

            maze[player_x][player_y] = '0'; // Update player's position in the maze

            // Move the obstacle
            if (obstacle_direction == 1) {
                obstacle_y -= 1;
                if (!isValidMove(maze, rows, cols, obstacle_x, obstacle_y)) {
                    obstacle_direction = -1;
                }
            } else {
                obstacle_y += 1;
                if (!isValidMove(maze, rows, cols, obstacle_x, obstacle_y)) {
                    obstacle_direction = 1;
                }
            }

            obstacle_x = obstacle_x;
            obstacle_y = obstacle_y;

            if (player_x == rows - 1 && player_y == cols - 1) {
                printf("Congratulations! You reached the endpoint.\n");
                return;
            }
        }

        movesLen++;
    }

    printf("Game over. You didn't reach the endpoint.\n");
}

int main() {
    int rows, cols;
    char maze[MAX_SIZE][MAX_SIZE];
    char moves[MAX_SIZE * MAX_SIZE];

    // Input maze size
    scanf("%d %d", &rows, &cols);

    // Input maze layout
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            scanf(" %c", &maze[i][j]);
        }
    }

    // Input player's movement path
    scanf("%s", moves);

    playMazeGame(maze, rows, cols, moves);

    return 0;
}
